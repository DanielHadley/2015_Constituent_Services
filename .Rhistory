# Most basic plots are easy. I'm making some hard ones to demonstrate what is possible:
# This plot probably requires the most tweaking
# It has seasons and money
# In the first line, I specify the order that I want the seasons to appear in the plot
MoneyBySeason$Season <- factor(MoneyBySeason$Season, levels=c("Winter", "Spring", "Summer", "Fall"))
# Now we make the plot
ggplot(MoneyBySeason, aes(x=Season, y=TotalMoney)) +
geom_bar(stat="identity", fill=nice_blue) +
my.theme + ggtitle("Money By Season") +
xlab("Season") + ylab("Total Money Collected") +
scale_y_continuous(labels = dollar) # This turns it back into $ money for the plot
# Uncomment the next line to save to your current directory
ggsave("./plots/2015_MoneyBySeason.png", dpi=250, width=5, height=3)
# Plot FalsesByDate
# I first transform into long format to put them side by side
data_long <- FalsesByDate  %>%
gather(TorF, value, Trues:Falses)
# Now we make the plot
ggplot(data_long, aes(x=Date, y=value, fill=TorF)) +
geom_bar(stat="identity", position="dodge") +
my.theme + ggtitle("True or False Over Time") + xlab("Time") +
ylab("True or False") +
scale_x_date(breaks = "1 month", labels=date_format("%B %Y"))
# Uncomment the next line to save to your current directory
ggsave("./plots/2015_FalsesByDate.png", dpi=250, width=5, height=3)
# Plot FalsesByDate but without the missing dates
# I first transform into long format to put them side by side
data_long <- FalsesByDate  %>%
gather(TorF, value, Trues:Falses) %>%
mutate(Date = as.factor(Date)) # Just turn this into a factor
# Now we make the plot
ggplot(data_long, aes(x=Date, y=value, fill=TorF)) +
geom_bar(stat="identity", position="dodge") +
my.theme + ggtitle("True or False By Date") + xlab("Date") +
ylab("True or False")
# Uncomment the next line to save to your current directory
ggsave("./plots/2015_FalsesByDate2.png", dpi=250, width=5, height=3)
d$FullAddress <- paste(d$Address, "Somerville", "MA", sep=", ")
d$FullAddress <- paste(d$Address, "Somerville", "MA", sep=", ")
# Geocodes using the Google engine
locs <- geocode(d$FullAddress)
View(locs)
test <- bind_cols(d, locs)
View(test)
d <- subset(d, lat != 42.3875968 ) # Takes out the weird ones Google couldn't pin
View(d)
d <- bind_cols(d, locs) # Add the lat and long back to d
d <- subset(d, lat != 42.3875968 ) # Takes out the weird ones Google couldn't pin
# Contour Map
map.center <- geocode("Somerville, MA")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14)
SHmap + geom_density2d(
aes(x=d$lon, y=d$lat,
fill = ..level.. , alpha = ..level..),size = 1.5, bins = 26, color="red",
data = d)
# Dot map centered on Conway Park
map.center <- geocode("Conway Park, Somerville, MA")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 16)
SHmap + geom_point(
aes(x=d$lon, y=d$lat),size = 10, alpha = .7, bins = 26, color="red",
data = d)
# More traditional heat map
Somerville = c(lon = -71.1000, lat =  42.3875)
somerville.map = get_map(location = Somerville, zoom = 14, maptype="roadmap",color = "bw")
ggmap(somerville.map, extent = "panel", maprange=FALSE) %+% d + aes(x = d$lon, y = d$lat) +
# geom_density2d(data = d, aes(x = lon, y = lat)) + # uncomment for contour lines
stat_density2d(data = d, aes(x = lon, y = lat,  fill = ..level.., alpha = ..level..),
size = 0.01, bins = 16, geom = 'polygon') +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0.00, 0.25), guide = FALSE) +
theme(legend.position = "none", axis.title = element_blank(), text = element_text(size = 12))
neighborhoodList <- c("Union Square", "Davis Square", "Ball Squre", )
neighborhoodList <- c("Union Square", "Davis Square", "Ball Squre", "Teele Square")
neighborhoodList[3]
map.center <- geocode(paste(neighborhoodList[3], "Somerville, MA", sep=1)
)
map.center <- geocode(paste(neighborhoodList[3], "Somerville, MA", sep="")
)
map.center <- geocode(paste(neighborhoodList[3], "Somerville, MA", sep=", "))
for (n in 1:(length(neighborhoodList))) {
map.center <- geocode(paste(neighborhoodList[n], "Somerville, MA", sep=", ")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 16)
SHmap + geom_point(
aes(x=d$lon, y=d$lat),size = 4, alpha = .7, bins = 26, color="red",
data = d) +
ggtitle(paste("Data About ", neighborhoodList[n]))
ggsave(paste("./plots/map_",neighborhoodList[n], sep=""), dpi=250, width=6, height=5)
}
for (n in 1:(length(neighborhoodList))) {
map.center <- geocode(paste(neighborhoodList[n], "Somerville, MA", sep=", ")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 16)
SHmap + geom_point(
aes(x=d$lon, y=d$lat),size = 4, alpha = .7, bins = 26, color="red",
data = d) +
ggtitle(paste("Data About ", neighborhoodList[n]))
ggsave(paste("./plots/map_",neighborhoodList[n], sep=""), dpi=250, width=6, height=5)
}
for (n in 1:(length(neighborhoodList))) {
map.center <- geocode(paste(neighborhoodList[n], "Somerville, MA", sep=", "))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 16)
SHmap + geom_point(
aes(x=d$lon, y=d$lat),size = 4, alpha = .7, bins = 26, color="red",
data = d) +
ggtitle(paste("Data About ", neighborhoodList[n]))
ggsave(paste("./plots/map_",neighborhoodList[n], sep=""), dpi=250, width=6, height=5)
}
n = 3
map.center <- geocode(paste(neighborhoodList[n], "Somerville, MA", sep=", "))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 16)
SHmap + geom_point(
aes(x=d$lon, y=d$lat),size = 4, alpha = .7, bins = 26, color="red",
data = d)
+
ggtitle(paste("Data About ", neighborhoodList[n]))
paste("Data About ", neighborhoodList[n])
paste("Data About", neighborhoodList[n], sep="")
SHmap + geom_point(
aes(x=d$lon, y=d$lat),size = 4, alpha = .7, bins = 26, color="red",
data = d) +
ggtitle(paste("Data About", neighborhoodList[n], sep=" "))
ggsave(paste("./plots/map_",neighborhoodList[n], sep=""), dpi=250, width=6, height=5)
paste("./plots/map_",neighborhoodList[n], sep="")
ggsave(paste("./plots/map_",neighborhoodList[n], ".png", sep=""), dpi=250, width=6, height=5)
for (n in 1:(length(neighborhoodList))) {
map.center <- geocode(paste(neighborhoodList[n], "Somerville, MA", sep=", "))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 16)
SHmap + geom_point(
aes(x=d$lon, y=d$lat),size = 4, alpha = .7, bins = 26, color="red",
data = d) +
ggtitle(paste("Data About", neighborhoodList[n], sep=" "))
ggsave(paste("./plots/map_",neighborhoodList[n], ".png", sep=""), dpi=250, width=6, height=5)
}
this.is.a.new.variable <- 3 # 3 is the value and this is a comment
add.3.and.2 <- sum(2, this.is.a.new.variable)
add.3.and.2
new.dataframe <- d %>%
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# Data is scraped each morning at 6:00 by code on Daniel's pc
# The FTP site was created by Ahmod at Intelligov
# R 3.1+ is needed for this
# If you don't have these packages, install first:
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggmap)
library(lubridate)
library(beepr)
setwd("K:/Somerstat/Common/Data/2015_Constituent_Services")
# Load data
d <- read.csv("./raw_data/Daily.csv")
# Converts data to tbl class. tbl's are easier to examine than data frames. R displays only the data that fits onscreen:
d <- tbl_df(d)
# dates
today <- Sys.Date()
yesterday <- today - 1
sixtyDaysAgo <- today - 60
YearAgo <- today - 365
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year <- format(d$Date, '%Y')
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$YearDay <- yday(d$Date)
d$DaysAgo <- difftime(d$Date, today, units = "days")
####  Code to help Visualize in ggplot2 ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my_color = nice_blue
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
#### Start analyzing ####
# Use this cheat sheet: http://www.rstudio.com/wp-content/uploads/2015/01/data-wrangling-cheatsheet1.pdf
#### Thorough analysis of one work order type ####
d$Service.Type <- gsub("/", "-", d$Service.Type) # take out / because it makes it hard to save plots
# First look at work order to see what to put below
sort(unique(d$Service.Type))
# Then copy and paste it into the quotes below and run the following code
workOrder <- "DPW-Pothole"
workOrderData <- d %>%
filter(Service.Type == workOrder)
workOrder <- "DPW-Tree Trimming"
workOrderData <- d %>%
filter(Service.Type == workOrder)
#### Time Series ####
days <- workOrderData %>%
group_by(Date) %>%
summarise(Events = n())
allDays <- seq.Date(from=d$Date[1], to = d$Date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "Date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='Date', all=TRUE)
ts[is.na(ts)] <- 0
remove(allDays, days)
ggplot(ts, aes(x=Date, y=Events)) +
geom_line(colour=my_color, size = .5) +
my.theme + ggtitle(paste(workOrder, "Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/OneOff/",workOrder, "_DailyTimeSeries.png", sep=""), dpi=250, width=5, height=3)
# Monthly time series
tsm <- ts %>%
mutate(Year.Month = format(Date, '%Y-%m')) %>%
group_by(Year.Month) %>%
summarise(Events = sum(Events)) %>%
mutate(Year.Month = as.Date(paste(Year.Month,1,sep="-"),"%Y-%m-%d"))
ggplot(tsm, aes(x=Year.Month, y=Events, group = 1)) +
geom_line(colour=my_color, size = .5) +
my.theme + ggtitle(paste(workOrder, "Calls Over Time")) + xlab("Time") +
ylab("Monthly Calls") +
scale_y_continuous(labels = comma) + scale_x_date(labels=date_format("%Y"))
ggsave(paste("./plots/OneOff/",workOrder, "_MonthlyTimeSeries.png", sep=""), dpi=250, width=5, height=3)
ggplot(tsm, aes(x=Year.Month, y=Events, group = 1)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, "Calls Over Time")) + xlab("Time") +
ylab("Monthly Calls") +
scale_y_continuous(labels = comma) + scale_x_date(labels=date_format("%Y"))
ggsave(paste("./plots/OneOff/",workOrder, "_MonthlyTimeSeriesBar.png", sep=""), dpi=250, width=5, height=3)
# Recent monthly time series
tsrm <- tsm %>%
filter(Year.Month > YearAgo)
ggplot(tsrm, aes(x=Year.Month, y=Events, group = 1)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, ": Last 12 Months")) + xlab("Month") +
ylab("Monthly Calls") +
scale_y_continuous(labels = comma) + scale_x_date(labels=date_format("%b %Y"))
ggsave(paste("./plots/OneOff/",workOrder, "_MonthlyTimeSeriesBarRecent.png", sep=""), dpi=250, width=5, height=3)
# Very recent daily time series
tsr <- ts %>%
filter(Date > sixtyDaysAgo)
ggplot(tsr, aes(x=Date, y=Events)) +
geom_line(colour=my_color, size = .5) +
my.theme + ggtitle(paste(workOrder, ": Last 60 Days")) + xlab("Day") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/OneOff/",workOrder, "_VeryRecentDailyTimeSeries.png", sep=""), dpi=250, width=5, height=3)
ggplot(tsr, aes(x=Date, y=Events)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, ": Last 60 Days")) + xlab("Day") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/OneOff/",workOrder, "_VeryRecentDailyTimeSeriesBar.png", sep=""), dpi=250, width=5, height=3)
### Year to Date Yearly Comparison
JustYtD <- workOrderData %>%
filter(YearDay <= yday(today))
AnnualYtD <- JustYtD %>%
group_by(Year) %>%
summarise(Events = n())
ggplot(AnnualYtD, aes(x=Year, y=Events)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, ": Year to Date")) + xlab("Year") +
ylab("YtD Calls") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/OneOff/",workOrder, "_YeartoDateBar.png", sep=""), dpi=250, width=5, height=3)
# More recent ytd
RecentYtD <- JustYtD %>%
group_by(Year) %>%
summarise(Events = n()) %>%
filter(Year > 2010)
ggplot(RecentYtD, aes(x=Year, y=Events)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, ": Year to Date")) + xlab("Year") +
ylab("YtD Calls") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/OneOff/",workOrder, "_YeartoDateBarRecent.png", sep=""), dpi=250, width=5, height=3)
View(d)
today <- Sys.Date()
yesterday <- today - 1
sixtyDaysAgo <- today - 60
YearAgo <- today - 365
TwoYearsAgo <- YearAgo - 365
ThreeYearsAgo <- TwoYearsAgo - 365
FourYearsAgo <- ThreeYearsAgo - 365
d$period <-
ifelse((d$Date >= YearAgo), "TrailingYear",
ifelse((d$Date >= TwoYearsAgo) & (d$Date < YearAgo), "PrevPer1",
ifelse((d$Date >= ThreeYearsAgo) & (d$Date < TwoYearsAgo), "PrevPer2",
ifelse((d$Date >= FourYearsAgo) & (d$Date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
d$period
Trailing365 <- d %>%
group_by(period) %>%
summarise(calls = n())
View(Trailing365)
View(Trailing365)
Trailing365 <- d %>%
group_by(period) %>%
summarise(calls = n()) %>%
filter(period != "LongAgo")
View(Trailing365)
TrailingYear <- d %>%
group_by(period) %>%
summarise(calls = n()) %>%
filter(period != "LongAgo")
TrailingYear <- d %>%
group_by(period) %>%
summarise(Events = n()) %>%
filter(period != "LongAgo")
ggplot(TrailingYear, aes(x=period, y=Events)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, ": Year to Date")) + xlab("Year") +
ylab("YtD Calls") +
scale_y_continuous(labels = comma)
View(d)
PerChange <- (TrailingYear$period[nrow(TrailingYear)] - TrailingYear$period[nrow(TrailingYear - 1)]) / TrailingYear$period[nrow(TrailingYear)]
TrailingYear$period[nrow(TrailingYear)]
TrailingYear$period[3]
PerChange <- (TrailingYear$Events[nrow(TrailingYear)] - TrailingYear$Event[nrow(TrailingYear - 1)]) / TrailingYear$Event[nrow(TrailingYear)]
TrailingYear$Events[nrow(TrailingYear)]
TrailingYear$Event[nrow(TrailingYear - 1)]
TrailingYear$Event[(nrow(TrailingYear)) - 1)]
TrailingYear$Event[(nrow(TrailingYear)) - 1]
PerChangeLastYear <- (TrailingYear$Events[nrow(TrailingYear)] - TrailingYear$Event[(nrow(TrailingYear)) - 1]) / TrailingYear$Event[nrow(TrailingYear)]
GrowthOrDeclineLastYear <- ifelse(PerChangeLastYear > 0, "are up by", "are down by")
# Difference in Trailing 365
PerChangeLastYear <- (TrailingYear$Events[nrow(TrailingYear)] - TrailingYear$Event[(nrow(TrailingYear)) - 1]) / TrailingYear$Event[nrow(TrailingYear)]
GrowthOrDeclineLastYear <- ifelse(PerChangeLastYear > 0, "are up by", "are down by")
# start writing out
# This makes the .txt report
sink(paste("./plots/OneOff/",workOrder, "_ReadMe.txt", sep=""))
cat(sprintf("Year to Date there have been %s calls for %s. Last year during the same time frame there were %s, which means calls for this work order %s %s percent \n", TrailingYear$Events[nrow(TrailingYear)], workOrder, TrailingYear$Event[(nrow(TrailingYear)) - 1], GrowthOrDeclineLastYear, round((PerChangeLastYear * 100))))
cat("---\n")
cat(sprintf("During the last 365 days there have been %s calls for %s. During the previous 365-day time frame there were %s, which means calls for this work order %s %s percent \n", AnnualYtD$Events[thisYear], workOrder, AnnualYtD$Events[thisYear-1], GrowthOrDecline, round((PerChange * 100))))
# Stop writing to the file
sink()
cat(sprintf("During the last 365 days there have been %s calls for %s. During the previous 365-day time frame there were %s, which means calls for this work order %s %s percent \n", AnnualYtD$Events[thisYear], workOrder, AnnualYtD$Events[thisYear-1], GrowthOrDecline, round((PerChange * 100))))
##### Descriptive stats ouput to a readme.txt ####
# Difference in YtD
thisYear <- nrow(AnnualYtD)
PerChange <- (AnnualYtD$Events[thisYear] - AnnualYtD$Events[thisYear - 1]) / AnnualYtD$Events[thisYear]
GrowthOrDecline <- ifelse(PerChange > 0, "are up by", "are down by")
# Difference in Trailing 365
PerChangeLastYear <- (TrailingYear$Events[nrow(TrailingYear)] - TrailingYear$Event[(nrow(TrailingYear)) - 1]) / TrailingYear$Event[nrow(TrailingYear)]
GrowthOrDeclineLastYear <- ifelse(PerChangeLastYear > 0, "are up by", "are down by")
# start writing out
# This makes the .txt report
sink(paste("./plots/OneOff/",workOrder, "_ReadMe.txt", sep=""))
cat(sprintf("Year to Date there have been %s calls for %s. Last year during the same time frame there were %s, which means calls for this work order %s %s percent \n", AnnualYtD$Events[thisYear], workOrder, AnnualYtD$Events[thisYear-1], GrowthOrDecline, round((PerChange * 100))))
cat("---\n")
cat(sprintf("During the last 365 days there have been %s calls for %s. During the previous 365-day time frame there were %s, which means calls for this work order %s %s percent \n", TrailingYear$Events[nrow(TrailingYear)], workOrder, TrailingYear$Event[(nrow(TrailingYear)) - 1], GrowthOrDeclineLastYear, round((PerChangeLastYear * 100))))
# Stop writing to the file
sink()
workOrderData$period <-
ifelse((d$Date >= YearAgo), "TrailingYear",
ifelse((d$Date >= TwoYearsAgo) & (d$Date < YearAgo), "PrevPer1",
ifelse((d$Date >= ThreeYearsAgo) & (d$Date < TwoYearsAgo), "PrevPer2",
ifelse((d$Date >= FourYearsAgo) & (d$Date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
TrailingYear <- workOrderData %>%
group_by(period) %>%
summarise(Events = n()) %>%
filter(period != "LongAgo")
ggplot(TrailingYear, aes(x=period, y=Events)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, ": Last 365 Days")) + xlab("Period") +
ylab("Calls / 365 Days") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/OneOff/",workOrder, "_Trailing365Days.png", sep=""), dpi=250, width=5, height=3)
workOrderData$period <-
ifelse((workOrderData$Date >= YearAgo), "TrailingYear",
ifelse((workOrderData$Date >= TwoYearsAgo) & (workOrderData$Date < YearAgo), "PrevPer1",
ifelse((workOrderData$Date >= ThreeYearsAgo) & (workOrderData$Date < TwoYearsAgo), "PrevPer2",
ifelse((workOrderData$Date >= FourYearsAgo) & (workOrderData$Date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
TrailingYear <- workOrderData %>%
group_by(period) %>%
summarise(Events = n()) %>%
filter(period != "LongAgo")
ggplot(TrailingYear, aes(x=period, y=Events)) +
geom_bar(stat='identity', fill=my_color) +
my.theme + ggtitle(paste(workOrder, ": Last 365 Days")) + xlab("Period") +
ylab("Calls / 365 Days") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/OneOff/",workOrder, "_Trailing365Days.png", sep=""), dpi=250, width=5, height=3)
##### Descriptive stats ouput to a readme.txt ####
# Difference in YtD
thisYear <- nrow(AnnualYtD)
PerChange <- (AnnualYtD$Events[thisYear] - AnnualYtD$Events[thisYear - 1]) / AnnualYtD$Events[thisYear]
GrowthOrDecline <- ifelse(PerChange > 0, "are up by", "are down by")
# Difference in Trailing 365
PerChangeLastYear <- (TrailingYear$Events[nrow(TrailingYear)] - TrailingYear$Event[(nrow(TrailingYear)) - 1]) / TrailingYear$Event[nrow(TrailingYear)]
GrowthOrDeclineLastYear <- ifelse(PerChangeLastYear > 0, "are up by", "are down by")
# start writing out
# This makes the .txt report
sink(paste("./plots/OneOff/",workOrder, "_ReadMe.txt", sep=""))
cat(sprintf("Year to Date there have been %s calls for %s. Last year during the same time frame there were %s, which means calls for this work order %s %s percent \n", AnnualYtD$Events[thisYear], workOrder, AnnualYtD$Events[thisYear-1], GrowthOrDecline, round((PerChange * 100))))
cat("---\n")
cat(sprintf("During the last 365 days there have been %s calls for %s. During the previous 365-day time frame there were %s, which means calls for this work order %s %s percent \n", TrailingYear$Events[nrow(TrailingYear)], workOrder, TrailingYear$Event[(nrow(TrailingYear)) - 1], GrowthOrDeclineLastYear, round((PerChangeLastYear * 100))))
# Stop writing to the file
sink()
##### Descriptive stats ouput to a readme.txt ####
# Difference in YtD
thisYear <- nrow(AnnualYtD)
PerChange <- (AnnualYtD$Events[thisYear] - AnnualYtD$Events[thisYear - 1]) / AnnualYtD$Events[thisYear]
GrowthOrDecline <- ifelse(PerChange > 0, "are up by", "are down by")
# Difference in Trailing 365
PerChangeLastYear <- (TrailingYear$Events[nrow(TrailingYear)] - TrailingYear$Event[(nrow(TrailingYear)) - 1]) / TrailingYear$Event[nrow(TrailingYear)]
GrowthOrDeclineLastYear <- ifelse(PerChangeLastYear > 0, "are up by", "are down by")
# start writing out
# This makes the .txt report
sink(paste("./plots/OneOff/",workOrder, "_ReadMe.txt", sep=""))
cat(sprintf("Year to Date there have been %s calls for %s. Last year during the same time frame there were %s, which means calls for this work order %s %s percent \n", AnnualYtD$Events[thisYear], workOrder, AnnualYtD$Events[thisYear-1], GrowthOrDecline, round((PerChange * 100))))
cat("---\n")
cat("Trailing 365 - a better comparison than YTD when it's early in the year\n")
cat(sprintf("During the last 365 days there have been %s calls for %s. During the previous 365-day time frame there were %s, which means calls for this work order %s %s percent \n", TrailingYear$Events[nrow(TrailingYear)], workOrder, TrailingYear$Event[(nrow(TrailingYear)) - 1], GrowthOrDeclineLastYear, round((PerChangeLastYear * 100))))
# Stop writing to the file
sink()
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
max(d$Date)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
max(d$Date)
#### Download Daily DATA ####
# First retreive the monthly data from the ftp server maintained by Intelligov
# This has all the work orders/quick tickets, and data on how quickly they are completed
url<-c("sftp://somervillemadata@ftp2.ciacorp.com/311DailyAllMonthDataDump.csv")
x <-getBinaryURL(url, userpwd="somervillemadata:today123")
# Write it
# http://stackoverflow.com/questions/18833031/download-rdata-and-csv-files-from-ftp-using-rcurl-or-any-other-method
writeBin(x, "./data/Daily.csv")
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Write it to the K drive
write.csv(d, "//fileshare1/Departments/Somerstat/Common/Data/2015_Constituent_Services/raw_data/Daily.csv")
# Remove everything else
remove(f, url, x)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
max(d$Date)
