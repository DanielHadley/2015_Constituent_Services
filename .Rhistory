library(jsonlite)
library(lubridate)
#### Load Data & Update via QSend API ####
# I leave out reqcustom, attachment, and deleted
activity <- read.csv("./data/activity.csv")
submitter <- read.csv("./data/submitter.csv")
request <- read.csv("./data/request.csv")
# Changes since x
# I do five days ago in case there is a problem for one or two days with the system
since <- Sys.Date() - 5
api <- paste("https://somervillema.qscend.com/qalert/api/v1/requests/changes/?since=", month(since), "%2F", day(since), "%2F", year(since), "&key=5c2b987d13cc414cb26f956cf31fbffc8ca62dc37d1a4f6bba3cc74398162db5", sep = "")
d <- fromJSON(api)
activityChanges <- d$activity
submitterChanges <- d$submitter
requestChanges <- d$request
# Now merge the dataframes
# Merge and get rid of dupes for activity
activityUpdated <- rbind(activity, activityChanges)
activityUpdated <- distinct(activityUpdated)
# Overwrite for request & submitter
# A clever method:
# http://stackoverflow.com/questions/28282484/join-two-dataframes-and-overwrite-matching-rows-r
requestUpdated <- rbind(requestChanges, request[!request$id %in% requestChanges$id,])
submitterUpdated <- rbind(submitterChanges, submitter[!submitter$id %in% submitterChanges$id,])
#### Write it ####
# Write it to the P: drive and my local
write.csv(requestUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/request.csv", row.names = FALSE)
write.csv(requestUpdated, "./data/request.csv", row.names = FALSE)
write.csv(activityUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/activity.csv", row.names = FALSE)
write.csv(activityUpdated, "./data/activity.csv", row.names = FALSE)
write.csv(submitterUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/submitter.csv", row.names = FALSE)
write.csv(submitterUpdated, "./data/submitter.csv", row.names = FALSE)
remove(activity, activityChanges, request, requestChanges, submitter, submitterChanges)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
requestUpdated$addDate
View(activityUpdated)
requestUpdated$displayDate
requestUpdated$Date <- as.Date(requestUpdated$displayDate, "%m/%d/%Y")
requestUpdated$Date
today <- Sys.Date()
yesterday <- today - 1
requestUpdated$Date <- as.Date(requestUpdated$displayDate, "%m/%d/%Y")
requestUpdated$Year.Month <- format(requestUpdated$Date, '%Y-%m')
requestUpdated$Month <- format(requestUpdated$Date, '%m')
requestUpdated$Year <- format(requestUpdated$Date, '%Y')
requestUpdated$DaysAgo <- difftime(requestUpdated$Date, today, units = "days")
LastTwentyFour <- requestUpdated %>%
filter(DaysAgo > -2) %>%
group_by(Service.Type) %>%
summarize(count=n()) %>%
filter(count > 5)
View(activityUpdated)
View(activityUpdated)
View(requestUpdated)
names(requestUpdated)
LastTwentyFour <- requestUpdated %>%
filter(DaysAgo > -2) %>%
group_by(typeName) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(Service.Type, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggplot(LastTwentyFour, aes(x=reorder(typeName, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
View(LastTwentyFour)
View(requestUpdated)
LastTwentyFour <- requestUpdated %>%
filter(DaysAgo > -2)
View(LastTwentyFour)
LastTwentyFour <- requestUpdated %>%
filter(DaysAgo > -1) %>%
group_by(typeName) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(typeName, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
View(LastTwentyFour)
# ggsave(paste("./plots/daily/", yesterday, "_LastTwentyFour.png", sep=""), dpi=300, width=5, height=5)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
ggsave("//fileshare1/Departments2/Somerstat Data/Constituent_Services/plots/LastTwentyFour.png", dpi=300, width=5, height=5)
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# Updated 8/15 for Qsend
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
library(jsonlite)
library(lubridate)
#### Load Data & Update via QSend API ####
# I leave out reqcustom, attachment, and deleted
activity <- read.csv("./data/activity.csv")
submitter <- read.csv("./data/submitter.csv")
request <- read.csv("./data/request.csv")
# Changes since x
# I do five days ago in case there is a problem for one or two days with the system
since <- Sys.Date() - 15
api <- paste("https://somervillema.qscend.com/qalert/api/v1/requests/changes/?since=", month(since), "%2F", day(since), "%2F", year(since), "&key=5c2b987d13cc414cb26f956cf31fbffc8ca62dc37d1a4f6bba3cc74398162db5", sep = "")
d <- fromJSON(api)
activityChanges <- d$activity
submitterChanges <- d$submitter
requestChanges <- d$request
activityUpdated <- rbind(activity, activityChanges)
activityUpdated <- distinct(activityUpdated)
# Overwrite for request & submitter
# A clever method:
# http://stackoverflow.com/questions/28282484/join-two-dataframes-and-overwrite-matching-rows-r
requestUpdated <- rbind(requestChanges, request[!request$id %in% requestChanges$id,])
submitterUpdated <- rbind(submitterChanges, submitter[!submitter$id %in% submitterChanges$id,])
#### Write it ####
# Write it to the P: drive and my local
write.csv(requestUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/request.csv", row.names = FALSE)
write.csv(requestUpdated, "./data/request.csv", row.names = FALSE)
write.csv(activityUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/activity.csv", row.names = FALSE)
write.csv(activityUpdated, "./data/activity.csv", row.names = FALSE)
write.csv(submitterUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/submitter.csv", row.names = FALSE)
write.csv(submitterUpdated, "./data/submitter.csv", row.names = FALSE)
remove(activity, activityChanges, request, requestChanges, submitter, submitterChanges, d)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
requestUpdated$Date <- as.Date(requestUpdated$displayDate, "%m/%d/%Y")
requestUpdated$Year.Month <- format(requestUpdated$Date, '%Y-%m')
requestUpdated$Month <- format(requestUpdated$Date, '%m')
requestUpdated$Year <- format(requestUpdated$Date, '%Y')
requestUpdated$DaysAgo <- difftime(requestUpdated$Date, today, units = "days")
#### Top from last day ####
LastTwentyFour <- requestUpdated %>%
filter(DaysAgo > -1) %>%
group_by(typeName) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(typeName, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
# ggsave(paste("./plots/daily/", yesterday, "_LastTwentyFour.png", sep=""), dpi=300, width=5, height=5)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
ggsave("//fileshare1/Departments2/Somerstat Data/Constituent_Services/plots/LastTwentyFour.png", dpi=300, width=5, height=5)
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# Updated 8/15 for Qsend
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
library(jsonlite)
library(lubridate)
#### Load Data & Update via QSend API ####
# I leave out reqcustom, attachment, and deleted
activity <- read.csv("./data/activity.csv")
submitter <- read.csv("./data/submitter.csv")
request <- read.csv("./data/request.csv")
View(request)
# Changes since x
# I do five days ago in case there is a problem for one or two days with the system
since <- Sys.Date() - 15
api <- paste("https://somervillema.qscend.com/qalert/api/v1/requests/changes/?since=", month(since), "%2F", day(since), "%2F", year(since), "&key=5c2b987d13cc414cb26f956cf31fbffc8ca62dc37d1a4f6bba3cc74398162db5", sep = "")
d <- fromJSON(api)
activityChanges <- d$activity
submitterChanges <- d$submitter
requestChanges <- d$request
View(request)
View(requestChanges)
# Now merge the dataframes
# Merge and get rid of dupes for activity
activityUpdated <- rbind(activity, activityChanges)
activityUpdated <- distinct(activityUpdated)
# Overwrite for request & submitter
# A clever method:
# http://stackoverflow.com/questions/28282484/join-two-dataframes-and-overwrite-matching-rows-r
requestUpdated <- rbind(requestChanges, request[!request$id %in% requestChanges$id,])
submitterUpdated <- rbind(submitterChanges, submitter[!submitter$id %in% submitterChanges$id,])
# Remove everything else
remove(activity, activityChanges, request, requestChanges, submitter, submitterChanges, d)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
requestUpdated$Date <- as.Date(requestUpdated$displayDate, "%m/%d/%Y")
requestUpdated$Year.Month <- format(requestUpdated$Date, '%Y-%m')
requestUpdated$Month <- format(requestUpdated$Date, '%m')
requestUpdated$Year <- format(requestUpdated$Date, '%Y')
requestUpdated$DaysAgo <- difftime(requestUpdated$Date, today, units = "days")
#### Top from last day ####
LastTwentyFour <- requestUpdated %>%
filter(DaysAgo > -1) %>%
group_by(typeName) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(typeName, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
ggsave("//fileshare1/Departments2/Somerstat Data/Constituent_Services/plots/LastTwentyFour.png", dpi=300, width=5, height=5)
Procedure2 = c(NA, 'x,y,z'))
d <- data.frame(ID = c('001','001'),
Code1 = c(1, NA),
Procedures1 = c('a,b,c',NA),
Code2 = c(NA, 2),
Procedure2 = c(NA, 'x,y,z'))
View(d)
#### Created 6/15 by Daniel Hadley to load and analyze Citizenserve Permit Data ####
# The FTP site was created by Julie at Citizenserve
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Citizenserve_Data/")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
# dates
# We use these for the charts and for downloading the most recent data
today <- Sys.Date()
yesterday <- today - 1
fileDate <- format(yesterday, format="%m%d%Y")
d <- read.delim("c:/Users/dhadley/Documents/GitHub/2015_Citizenserve_Data/data/Daily_Permits.txt")
View(d)
PUT("https://data.somervillema.gov/resource/ym4c-vshh.json",
body = upload_file("./data/Daily_Permits.csv"),
authenticate("scraig@somervillema.gov", "Constituent2"),
add_headers("X-App-Token" = "FSax3MAURoTngN3uz9mGBZVR8",
"Content-Type" = "text/csv"))
library(RCurl)
PUT("https://data.somervillema.gov/resource/ym4c-vshh.json",
body = upload_file("./data/Daily_Permits.csv"),
authenticate("scraig@somervillema.gov", "Constituent2"),
add_headers("X-App-Token" = "FSax3MAURoTngN3uz9mGBZVR8",
"Content-Type" = "text/csv"))
library('httr')
PUT("https://data.somervillema.gov/resource/ym4c-vshh.json",
body = upload_file("./data/Daily_Permits.csv"),
authenticate("scraig@somervillema.gov", "Constituent2"),
add_headers("X-App-Token" = "FSax3MAURoTngN3uz9mGBZVR8",
"Content-Type" = "text/csv"))
#### Load Data & Update via QSend API ####
# I leave out reqcustom, attachment, and deleted
activity <- read.csv("./data/activity.csv")
submitter <- read.csv("./data/submitter.csv")
request <- read.csv("./data/request.csv")
reqcustom <- read.csv("./data/reqcustom.csv")
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# Updated 8/15 for Qsend
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
library(jsonlite)
library(lubridate)
#### Load Data & Update via QSend API ####
# I leave out reqcustom, attachment, and deleted
activity <- read.csv("./data/activity.csv")
submitter <- read.csv("./data/submitter.csv")
request <- read.csv("./data/request.csv")
reqcustom <- read.csv("./data/reqcustom.csv")
View(activity)
View(request)
# Changes since x
# I do five days ago in case there is a problem for one or two days with the system
since <- Sys.Date() - 5
api <- paste("https://somervillema.qscend.com/qalert/api/v1/requests/changes/?since=", month(since), "%2F", day(since), "%2F", year(since), "&key=5c2b987d13cc414cb26f956cf31fbffc8ca62dc37d1a4f6bba3cc74398162db5", sep = "")
d <- fromJSON(api)
activityChanges <- d$activity
submitterChanges <- d$submitter
requestChanges <- d$request
reqcustomChanges <- d$reqcustom
# Now merge the dataframes
# Merge and get rid of dupes for activity
activityUpdated <- rbind(activity, activityChanges)
activityUpdated <- distinct(activityUpdated)
reqcustomUpdated <- rbind(reqcustom, reqcustomChanges)
reqcustomUpdated <- distinct(reqcustomUpdated)
# Overwrite for request & submitter
# A clever method:
# http://stackoverflow.com/questions/28282484/join-two-dataframes-and-overwrite-matching-rows-r
requestUpdated <- rbind(requestChanges, request[!request$id %in% requestChanges$id,])
submitterUpdated <- rbind(submitterChanges, submitter[!submitter$id %in% submitterChanges$id,])
#### Write it ####
# Write it to the P: drive and my local
write.csv(requestUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/request.csv", row.names = FALSE)
write.csv(requestUpdated, "./data/request.csv", row.names = FALSE)
write.csv(activityUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/activity.csv", row.names = FALSE)
write.csv(activityUpdated, "./data/activity.csv", row.names = FALSE)
write.csv(submitterUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/submitter.csv", row.names = FALSE)
write.csv(submitterUpdated, "./data/submitter.csv", row.names = FALSE)
write.csv(reqcustomUpdated, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/reqcusreqcustom.csv", row.names = FALSE)
write.csv(reqcustomUpdated, "./data/reqcusreqcustom.csv", row.names = FALSE)
# Remove everything else
remove(activity, activityChanges, request, requestChanges, submitter, submitterChanges, reqcustom, reqcustomChanges, d)
View(activityUpdated)
View(activityUpdated)
table(activityUpdated$codeDesc)
names(activityUpdated)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(id) %>%
ssummarise(id = min(id))
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(id) %>%
summarise(id = min(id))
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(id)
View(lastAction)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.min(id.)])
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.min(id)])
View(lastAction)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.max(id)],
codeDesc = codeDesc)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.max(id)],
codeDesc = codeDesc[which.max(id)])
View(lastAction)
activityUpdated$codeDesc[which.max(id)]
View(lastAction)
View(activityUpdated)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.max(id)],
codeDesc = codeDesc[which.max(id)])
View(lastAction)
summary(lastAction$codeDesc)
View(activityUpdated)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.max(id)],
codeDesc = codeDesc[2])
View(lastAction)
View(activityUpdated)
View(lastAction)
View(lastAction)
View(activityUpdated)
View(lastAction)
View(activityUpdated)
View(activityUpdated)
View(lastAction)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.max(id)],
codeDesc = codeDesc[which.max(id)])
View(lastAction)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(id = id[which.max(id)],
codeDesc = codeDesc[which.max(id)])
View(lastAction)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(codeDesc = codeDesc[which.max(id)])
View(lastAction)
names(activityUpdated)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(codeDesc = codeDesc[which.max(id)],
dateLastAction = displayDate)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated") %>%
group_by(requestId) %>%
summarise(codeDesc = codeDesc[which.max(id)],
dateLastAction = displayDate[which.max(id)])
View(lastAction)
View(activityUpdated)
View(lastAction)
View(activityUpdated)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated" & codeDesc != "Submitter Contacted") %>%
group_by(requestId) %>%
summarise(codeDesc = codeDesc[which.max(id)],
dateLastAction = displayDate[which.max(id)])
View(lastAction)
View(activityUpdated)
View(lastAction)
summary(lastAction)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated" & codeDesc != "Submitter Contacted") %>%
group_by(requestId) %>%
summarise(LastAction = codeDesc[which.max(id)],
dateLastAction = displayDate[which.max(id)])
View(lastAction)
View(activityUpdated)
View(activityUpdated)
View(lastAction)
d <- merge(activityUpdated, lastAction, by.x = id, by.y = requestId)
d <- merge(requestUpdated, lastAction, by.x = id, by.y = requestId)
d <- merge(requestUpdated, lastAction, by.x = "id", by.y = "requestId")
View(d)
View(d)
names(d)
d <- d %>%
select(id, cityName: dateLastAction)
View(d)
test <- d  %>% select(displayLastAction, dateLastAction)
View(test)
View(d)
View(test)
test$test <- ifelse(test$displayLastAction == test$dateLastAction, "yes", "no")
View(test)
lastAction <- activityUpdated  %>%
filter(codeDesc != "Printed" & codeDesc != "Escalated" & codeDesc != "Submitter Contacted") %>%
group_by(requestId) %>%
summarise(LastAction = codeDesc[which.max(id)],
dateLastAction = displayDate[which.max(id)])
d <- merge(requestUpdated, lastAction, by.x = "id", by.y = "requestId")
names(d)
View(d)
View(d)
d <- d %>%
select(id, cityName, comments, dept, displayDate, district, latitude, longitude, streetId: dateLastAction)
View(d)
write.csv(d, "//fileshare1/Departments2/Somerstat Data/Constituent_Services/data/311_Somerville.csv", row.names = FALSE)
write.csv(d, "./data/311_Somerville.csv", row.names = FALSE)
