axis.title=element_text(size=26), # Enlarge axis title font
plot.title=element_text(size=42, hjust=0) # Enlarge, left-align title
#,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
p <- qplot(Year, data=d, geom="bar", fill=col4, alpha=I(.7), main="Incidents", ylab="Number of Incidents")
p + my.theme + facet_grid(. ~ Season) # Facet grid is the perfect way to add more to your X-axis
# A simple method is to use the "weight" function with qplot. This will even work with aggregate
p <- qplot(Year, weight = col2Numeric, data = data.c, geom = "bar", alpha=I(.7), main="Data By Year", ylab="Col2 Count")
p + my.theme + scale_y_continuous(labels = comma) # scale y is not useful here, but changes from
d <- read.delim("clipboard")
View(d)
d <- read.delim("clipboard")
d <- read.delim("clipboard")
setwd("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/)
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv")
d <- read.csv(K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv)
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv)
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv")
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv")
summary(d)
hist(d$SurfaceWid)
hist(d$SurfaceWid)
d$FederalFun
hist(d$FederalFun)
hist(d$AssignedLe)
hist(d$EquationRo)
hist(d$Assigned_1)
table(d$SurfaceWid, d$FederalFun)
table(d$FederalFun, d$SurfaceWid)
aggregate(d$FederalFun ~ d$SurfaceWid, d, mean )
aggregate(d$SurfaceWid  ~ d$FederalFun, d, mean )
hist(d$FederalFun)
hist(d$Functional)
library(RCurl)
url<-c("sftp://somervillemadata@ftp2.ciacorp.com/index.html")
x <-getURL(url, userpwd="somervillemadata:today123")
require("maptools")
require("ggplot2")
require("plyr")
install.packages('maptools')
install.packages('rgdal')
.libPaths()
getwd()
.libPaths()
install.packages('dplyr')
R.version()
R.Version()
R_LIBS=C:/Program Files/R/R-3.1.2/library
R_LIBS=C:\Program Files\R\R-3.1.2\library
installed.packages
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
getwd()
.libPaths()
ls
install.packages('dplyr')
library(ggplot2)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Remove everything else
remove(f, url, x)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
#### Top from last day ####
LastTwentyFour <- d %>%
filter(DaysAgo > -2) %>%
group_by(Service.Type) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(Service.Type, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/daily/", yesterday, "_LastTwentyFour.png", sep=""), dpi=300, width=5, height=5)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Remove everything else
remove(f, url, x)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
#### Top from last day ####
LastTwentyFour <- d %>%
filter(DaysAgo > -2) %>%
group_by(Service.Type) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(Service.Type, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/daily/", yesterday, "_LastTwentyFour.png", sep=""), dpi=300, width=5, height=5)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
today
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# The FTP site was created by Ahmod at Intelligov
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
#### Download Daily DATA ####
# First retreive the monthly data from the ftp server maintained by Intelligov
# This has all the work orders/quick tickets, and data on how quickly they are completed
url<-c("sftp://somervillemadata@ftp2.ciacorp.com/311DailyAllMonthDataDump.csv")
x <-getBinaryURL(url, userpwd="somervillemadata:today123")
# Write it
# http://stackoverflow.com/questions/18833031/download-rdata-and-csv-files-from-ftp-using-rcurl-or-any-other-method
writeBin(x, "./data/Daily.csv")
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Remove everything else
remove(f, url, x)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
#### Top from last day ####
LastTwentyFour <- d %>%
filter(DaysAgo > -2) %>%
group_by(Service.Type) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(Service.Type, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/daily/", yesterday, "_LastTwentyFour.png", sep=""), dpi=300, width=5, height=5)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
tail(d)
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# The FTP site was created by Ahmod at Intelligov
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
.libPaths()
sessionInfo()
Sys.getenv()
Sys.getenv()
install.packages('RCurl')
install.packages('ggplot2')
install.packages('scales')
install.packages('tidyr')
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# The FTP site was created by Ahmod at Intelligov
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
#### Download Daily DATA ####
# First retreive the monthly data from the ftp server maintained by Intelligov
# This has all the work orders/quick tickets, and data on how quickly they are completed
url<-c("sftp://somervillemadata@ftp2.ciacorp.com/311DailyAllMonthDataDump.csv")
x <-getBinaryURL(url, userpwd="somervillemadata:today123")
# Write it
# http://stackoverflow.com/questions/18833031/download-rdata-and-csv-files-from-ftp-using-rcurl-or-any-other-method
writeBin(x, "./data/Daily.csv")
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Remove everything else
remove(f, url, x)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
#### Top from last day ####
LastTwentyFour <- d %>%
filter(DaysAgo > -2) %>%
group_by(Service.Type) %>%
summarize(count=n()) %>%
filter(count > 5)
ggplot(LastTwentyFour, aes(x=reorder(Service.Type, count)  , y=count)) +
geom_bar(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggsave(paste("./plots/daily/", yesterday, "_LastTwentyFour.png", sep=""), dpi=300, width=5, height=5)
ggsave("./plots/daily/LastTwentyFour.png", dpi=300, width=5, height=5)
.libPaths()
install.packages('RGoogleAnalytics')
library(RGoogleAnalytics)
ga <- GoogleAnalyticsAPI()
ga$SetCredentials(“somerville.mis”, “P@ssw0rd”)
ga$SetCredentials('somerville.mis', 'P@ssw0rd')
library(RGoogleAnalytics)
# Generate the oauth_token object
oauth_token <- Auth(client.id = "1019294060148-qh4bfetpno7qf180vme3jtiubovljra5.apps.googleusercontent.com",
client.secret = "jRT1Tzkrj60Ma4XExgxJVT_s")
GetProfiles(token)
GetProfiles(oauth_token)
query.list <- Init(start.date = "2014-11-28",
end.date = "2014-12-04",
dimensions = "ga:date",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:33093633")
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(query, oauth_token)
ga.df <- GetReportData(query, oauth_token, split_daywise=True)
ga.df <- GetReportData(query, oauth_token, paginate_query=True)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = "2014-11-28",
end.date = "2014-12-04",
dimensions = "ga:date",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:33093633")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(query, oauth_token)
ga.df <- GetReportData(query, oauth_token, split_daywise=True)
ga.df <- GetReportData(query, oauth_token, paginate_query=True)
ga.query <- QueryBuilder(query.list)
ga.df <- GetReportData(ga.query, oauth_token)
GetProfiles(token)
GetProfile(oauth_token)
GetProfiles(oauth_token)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = "2014-11-28",
end.date = "2014-12-04",
dimensions = "ga:date",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
View(ga.df)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = "2014-11-28",
end.date = "2014-12-04",
dimensions = "ga:date",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
ga.df <- GetReportData(ga.query, oauth_token, split_daywise=True)
ga.df <- GetReportData(ga.query, oauth_token, paginate_query=True)
ga.df <- GetReportData(ga.query, oauth_token)
ga.df
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = "2014-11-28",
end.date = "2014-12-04",
dimensions = "ga:date",
metrics = "ga:sessions,ga:pageviews,ga:pageTitle",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = "2014-11-28",
end.date = "2014-12-04",
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
View(ga.df)
# dates
today <- Sys.Date()
yesterday <- today - 1
today
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = yesterday,
end.date = today,
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
today
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date,
end.date,
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = Sys.Date()-3,
end.date = Sys.Date(),
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = Sys.Date(),
end.date = Sys.Date(),
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = print(Sys.Date()-3),
end.date = print(Sys.Date()-3)),
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
# This example assumes that a token object is already created
# Create a list of Query Parameters
query.list <- Init(start.date = as.character(Sys.Date()-1),
end.date = as.character(Sys.Date()),
dimensions = "ga:pageTitle",
metrics = "ga:sessions,ga:pageviews",
max.results = 1000,
table.id = "ga:26776898")
# Create the query object
ga.query <- QueryBuilder(query.list)
# Fire the query to the Google Analytics API
ga.df <- GetReportData(ga.query, oauth_token)
View(ga.df)
